// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: api/garden-service/v1/garden_service.proto

package gardenservicev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GardenService_GetFlowers_FullMethodName   = "/api.garden_service.v1.GardenService/GetFlowers"
	GardenService_GetMushrooms_FullMethodName = "/api.garden_service.v1.GardenService/GetMushrooms"
)

// GardenServiceClient is the client API for GardenService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GardenServiceClient interface {
	GetFlowers(ctx context.Context, in *GetFlowersRequest, opts ...grpc.CallOption) (*GetFlowersResponse, error)
	GetMushrooms(ctx context.Context, in *GetMushroomsRequest, opts ...grpc.CallOption) (*GetMushroomsResponse, error)
}

type gardenServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGardenServiceClient(cc grpc.ClientConnInterface) GardenServiceClient {
	return &gardenServiceClient{cc}
}

func (c *gardenServiceClient) GetFlowers(ctx context.Context, in *GetFlowersRequest, opts ...grpc.CallOption) (*GetFlowersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFlowersResponse)
	err := c.cc.Invoke(ctx, GardenService_GetFlowers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gardenServiceClient) GetMushrooms(ctx context.Context, in *GetMushroomsRequest, opts ...grpc.CallOption) (*GetMushroomsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMushroomsResponse)
	err := c.cc.Invoke(ctx, GardenService_GetMushrooms_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GardenServiceServer is the server API for GardenService service.
// All implementations must embed UnimplementedGardenServiceServer
// for forward compatibility.
type GardenServiceServer interface {
	GetFlowers(context.Context, *GetFlowersRequest) (*GetFlowersResponse, error)
	GetMushrooms(context.Context, *GetMushroomsRequest) (*GetMushroomsResponse, error)
	mustEmbedUnimplementedGardenServiceServer()
}

// UnimplementedGardenServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGardenServiceServer struct{}

func (UnimplementedGardenServiceServer) GetFlowers(context.Context, *GetFlowersRequest) (*GetFlowersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFlowers not implemented")
}
func (UnimplementedGardenServiceServer) GetMushrooms(context.Context, *GetMushroomsRequest) (*GetMushroomsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMushrooms not implemented")
}
func (UnimplementedGardenServiceServer) mustEmbedUnimplementedGardenServiceServer() {}
func (UnimplementedGardenServiceServer) testEmbeddedByValue()                       {}

// UnsafeGardenServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GardenServiceServer will
// result in compilation errors.
type UnsafeGardenServiceServer interface {
	mustEmbedUnimplementedGardenServiceServer()
}

func RegisterGardenServiceServer(s grpc.ServiceRegistrar, srv GardenServiceServer) {
	// If the following call pancis, it indicates UnimplementedGardenServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GardenService_ServiceDesc, srv)
}

func _GardenService_GetFlowers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFlowersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GardenServiceServer).GetFlowers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GardenService_GetFlowers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GardenServiceServer).GetFlowers(ctx, req.(*GetFlowersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GardenService_GetMushrooms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMushroomsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GardenServiceServer).GetMushrooms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GardenService_GetMushrooms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GardenServiceServer).GetMushrooms(ctx, req.(*GetMushroomsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GardenService_ServiceDesc is the grpc.ServiceDesc for GardenService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GardenService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.garden_service.v1.GardenService",
	HandlerType: (*GardenServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFlowers",
			Handler:    _GardenService_GetFlowers_Handler,
		},
		{
			MethodName: "GetMushrooms",
			Handler:    _GardenService_GetMushrooms_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/garden-service/v1/garden_service.proto",
}
